{{#if @root.useCancelableRequest}}
async function sendRequest<T>(options: ApiRequestOptions, url: string, onCancel: (cancelHandler: () => void) => void): Promise<AxiosResponse<T>> {
  const source = axios.CancelToken.source();
{{else}}
async function sendRequest<T>(options: ApiRequestOptions, url: string): Promise<AxiosResponse<T>> {
{{/if}}
  
  const requestConfig: AxiosRequestConfig = {
    method: options.method,
    headers: await getHeaders(options),
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    data: getRequestBody(options),
    url,
    {{#if @root.useCancelableRequest}}
    cancelToken: source.token,
    {{/if}}
  };

  {{#if @root.useCancelableRequest}}
  onCancel(() => source.cancel('The user aborted a request.'));
  {{/if}}

  try {
		return await axios.request(requestConfig);
	} catch (error) {
		const axiosError = error as AxiosError<T>;
		if (axiosError.response) {
			return axiosError.response;
		}
		throw error;
	}
}