{{>header}}

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import { OpenAPI } from './OpenAPI';
import { EHTTP_STATUS_CODES, EHTTP_STATUS_NAME } from './HttpStatusCode';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export function request<T>(options: ApiRequestOptions): CancelablePromise<T> {
    return new CancelablePromise(async(resolve, reject, onCancel) => {
        try {
            const url = getUrl(options);

            if (!onCancel.isCancelled) {
                const response = await sendRequest(options, url, onCancel);
                const responseBody = await getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);
                const result: ApiResult = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader || responseBody,
                };
                catchErrors(options, result);
                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
}
