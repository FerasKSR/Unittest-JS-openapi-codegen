name: CI

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Node in Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.20.1'
          always-auth: true
#       - name: Get the npm version
#         id: release
#         uses: martinbeentjes/npm-get-version-action@master
#       - run: |
#            echo "Version: ${{ steps.release.outputs.current-version }}"
      - name: Install packages
        run: npm install
      - name: Build library
        run: npm run release
      - name: Run unit tests
        run: npm run test:coverage
      - name: Run e2e tests
        run: npm run test:e2e
      - name: Submit to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV }}
#       - name: Get the tag version
#         id: tag_version
#         uses: oprypin/find-latest-tag@v1
#         with:
#           repository: ozonophore/openapi-codegen
#           releases-only: true
#           token: ${{ secrets.GITHUB_TOKEN }}
#       - run: |
#            echo "Tag version: ${{ steps.tag_version.outputs.tag }}"
#       - name: Create Release
#         id: create_release
#         if: github.ref == 'refs/heads/master' && steps.release.outputs.current-version != steps.tag_version.outputs.tag
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           tag_name: ${{ steps.release.outputs.current-version }}
#           release_name: Release ${{ steps.release.outputs.current-version }}
#           draft: false
#           prerelease: false
#       - name: Publish
#         id: publish
#         if: github.ref == 'refs/heads/master'
#         uses: JS-DevTools/npm-publish@v1
#         with:
#           token: ${{ secrets.NPM_AUTH_TOKEN }}
#           check-version: true
#           access: public
#       - if: steps.Publish.outputs.type != 'none'
#         run: |
#           echo "Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }}"
